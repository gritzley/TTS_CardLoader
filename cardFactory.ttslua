SCRYFALL_BASE_URL = "https://api.scryfall.com/"
CARD_BACK_URL = "https://static.wikia.nocookie.net/mtgsalvation_gamepedia/images/f/f8/Magic_card_back.jpg/revision/latest?cb=20140813141013"

function createCardsFromData(data, faceup)

    -- if there are more than 75 identifiers in the data, we need to split it into several requets
    if (data[75]) then
        local excessData = {}
        for i, v in ipairs(data) do
            if i > 75 then
                excessData[i-75] = v
                data[i] = nil
            end
        end
        createCardsFromData(excessData)
    end

    local body = JSON.encode({
        identifiers = data
    })

    local headers = {
        ["Content-Type"] = "application/json"
    }

    WebRequest.custom(SCRYFALL_BASE_URL.."cards/collection", "POST", true, body, headers, function(request)

        if requestNotValid(request) then return end

        local cards = JSON.decode(request.text).data

        for i, v in ipairs(JSON.decode(request.text).not_found) do
            print (JSON.encode(v) .. " not found")
        end

        for i, value in ipairs(cards) do
            for j=1, data[i].amount do createCard(value, data[i].target, faceup) end
        end
    end)
end

function createRandomCard(query, faceup)

    if not alchemyEnabled then query = "game:paper%20"..query end

    WebRequest.get(SCRYFALL_BASE_URL.."cards/random?q="..query, function(request)

        if requestNotValid(request) then return end

        local card = JSON.decode(request.text)

        if card.code == "Not_found" then
            print("No card matching the query could be found")
            return
        end
        createCard(card, MAINDECK_POSITION, faceup)
    end)
end

function createCard(data, target, faceup)

    local cardData = {
        type = "CardCustom",

        position = target,
        rotation = {0, 180, 180},
        scale = CARD_SCALE or {1, 1, 1}
    }

    if faceup then cardData.rotation[3] = 0 end
    local card = spawnObject(cardData)

    if data.image_uris ~= nil then
        card.setCustomObject({
            face = data.image_uris.large,
            back = CARD_BACK_URL
        })
    else
        card.setCustomObject({
            face = data.card_faces[1].image_uris.large,
            back = CARD_BACK_URL
        })

        card.setGMNotes(JSON.encode({
            backface = data.card_faces[2].image_uris.large
        }))
    end

    card.setName(data.name)
end

function tryObjectRandomize(object)
    local gmData = JSON.decode(object.getGMNotes())
    if gmData == nil then return end

    if gmData.backface ~= nil then
        local tmp = object.getCustomObject()
        object.setCustomObject({
            face = gmData.backface,
            back = tmp.back
        })
        gmData.backface = tmp.face
    end

    object.setGMNotes(JSON.encode(gmData))
end
